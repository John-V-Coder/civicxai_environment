# Generated by Django 5.2.7 on 2025-10-19 21:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_workgroups', models.IntegerField(default=0)),
                ('active_workgroups', models.IntegerField(default=0)),
                ('inactive_workgroups', models.IntegerField(default=0)),
                ('total_members', models.IntegerField(default=0)),
                ('active_members', models.IntegerField(default=0)),
                ('new_members_month', models.IntegerField(default=0)),
                ('total_proposals', models.IntegerField(default=0)),
                ('proposals_in_review', models.IntegerField(default=0)),
                ('proposals_approved', models.IntegerField(default=0)),
                ('proposals_rejected', models.IntegerField(default=0)),
                ('total_allocated', models.DecimalField(decimal_places=2, default=0, max_digits=14)),
                ('total_disbursed', models.DecimalField(decimal_places=2, default=0, max_digits=14)),
                ('regions_funded', models.IntegerField(default=0)),
                ('average_priority_score', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('role', models.CharField(choices=[('citizen', 'Citizen'), ('contributor', 'Core Contributor'), ('admin', 'Administrator'), ('analyst', 'Data Analyst')], default='citizen', max_length=20)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('contribution_score', models.IntegerField(default=0)),
                ('proposals_created', models.IntegerField(default=0)),
                ('votes_cast', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_online', models.BooleanField(default=False)),
                ('joined_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-contribution_score', '-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('county', models.CharField(blank=True, max_length=100)),
                ('population', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('area_sq_km', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('poverty_index', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('unemployment_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('education_index', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('health_index', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('deforestation_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('air_quality_index', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('water_scarcity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('project_impact_score', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('infrastructure_need', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('corruption_risk', models.FloatField(default=0.3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('priority_score', models.FloatField(default=0, editable=False)),
                ('current_allocation', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_assessment', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-priority_score', 'name'],
                'indexes': [models.Index(fields=['priority_score'], name='explainable_priorit_28de00_idx'), models.Index(fields=['region_id'], name='explainable_region__23c96d_idx')],
            },
        ),
        migrations.CreateModel(
            name='Workgroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('infrastructure', 'Infrastructure'), ('environment', 'Environment'), ('education', 'Education'), ('health', 'Health'), ('economy', 'Economy'), ('governance', 'Governance')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('proposals_count', models.IntegerField(default=0)),
                ('completed_tasks', models.IntegerField(default=0)),
                ('budget_allocated', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('leads', models.ManyToManyField(blank=True, related_name='workgroups_lead', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, related_name='workgroups_member', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposal_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('proposal_type', models.CharField(choices=[('allocation', 'Resource Allocation'), ('policy', 'Policy Change'), ('project', 'New Project'), ('budget', 'Budget Adjustment'), ('quarterly', 'Quarterly Report')], max_length=20)),
                ('requested_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('approved_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('in_review', 'In Review'), ('voting', 'Voting'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('implemented', 'Implemented'), ('expired', 'Expired')], default='draft', max_length=20)),
                ('priority', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('votes_for', models.IntegerField(default=0)),
                ('votes_against', models.IntegerField(default=0)),
                ('quorum_required', models.IntegerField(default=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('review_deadline', models.DateTimeField(blank=True, null=True)),
                ('voting_deadline', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('ai_risk_score', models.FloatField(blank=True, null=True)),
                ('ai_recommendation', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_proposals', to=settings.AUTH_USER_MODEL)),
                ('related_region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='explainable_ai.region')),
                ('workgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposals', to='explainable_ai.workgroup')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('deadline', 'Deadline'), ('meeting', 'Meeting'), ('report', 'Report Due'), ('voting', 'Voting Period'), ('review', 'Review Window')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_high_priority', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('related_proposal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='explainable_ai.proposal')),
                ('related_workgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='explainable_ai.workgroup')),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='Allocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('fiscal_year', models.IntegerField()),
                ('quarter', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('priority_score_snapshot', models.FloatField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('disbursed', 'Disbursed'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('explanation', models.TextField()),
                ('explanation_factors', models.JSONField(default=dict)),
                ('policy_compliance', models.TextField(blank=True)),
                ('suggested_actions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('disbursed_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='explainable_ai.region')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('region', 'fiscal_year', 'quarter')},
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('for', 'For'), ('against', 'Against'), ('abstain', 'Abstain')], max_length=10)),
                ('comment', models.TextField(blank=True)),
                ('voted_at', models.DateTimeField(auto_now_add=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='explainable_ai.proposal')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-voted_at'],
                'unique_together': {('proposal', 'voter')},
            },
        ),
    ]
